var searchIndex = {};
searchIndex["bincode"] = {"doc":"`bincode` is a crate for encoding and decoding using a tiny binary\nserialization strategy.","items":[[3,"RefBox","bincode","A struct for encoding nested reference types.",null,null],[3,"StrBox","","Like a RefBox, but encoding from a `str` and decoedes to a `String`.",null,null],[3,"SliceBox","","Like a RefBox, but encodes from a `[T]` and encodes to a `Vec&lt;T&gt;`.",null,null],[4,"SizeLimit","","A limit on the amount of bytes that can be read or written.",null,null],[13,"Infinite","","",0,null],[13,"Bounded","","",0,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"hash","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"cmp","","",2,null],[11,"hash","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"partial_cmp","","",3,null],[11,"lt","","",3,null],[11,"le","","",3,null],[11,"gt","","",3,null],[11,"ge","","",3,null],[11,"cmp","","",3,null],[11,"hash","","",3,null],[11,"clone","","",3,null],[11,"new","","Creates a new RefBox that looks at a borrowed value.",1,{"inputs":[{"name":"t"}],"output":{"name":"refbox"}}],[11,"take","","Takes the value out of this refbox.",1,null],[11,"try_take","","Tries to take the value out of this refbox.",1,null],[11,"encode","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",1,null],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new StrBox that looks at a borrowed value.",2,{"inputs":[{"name":"str"}],"output":{"name":"strbox"}}],[11,"into_string","","Extract a String from a StrBox.",2,null],[11,"to_owned","","Convert to an Owned `SliceBox`.",2,null],[11,"as_ref","","",2,null],[11,"boxed","","Creates a new StrBox made from an allocated String.",2,{"inputs":[{"name":"string"}],"output":{"name":"strbox"}}],[11,"take","","Takes the value out of this refbox.",2,null],[11,"try_take","","Tries to take the value out of this refbox.",2,null],[11,"encode","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",2,null],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","","Creates a new RefBox that looks at a borrowed value.",3,null],[11,"into_vec","","Extract a `Vec&lt;T&gt;` from a `SliceBox`.",3,null],[11,"to_owned","","Convert to an Owned `SliceBox`.",3,null],[11,"boxed","","Creates a new SliceBox made from an allocated `Vec&lt;T&gt;`.",3,{"inputs":[{"name":"vec"}],"output":{"name":"slicebox"}}],[11,"take","","Takes the value out of this refbox.",3,null],[11,"try_take","","Tries to take the value out of this refbox.",3,null],[11,"encode","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",3,null],[11,"deserialize","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deref","","",1,null],[11,"deref","","",3,null],[0,"rustc_serialize","","A collection of serialization and deserialization functions\nthat use the `rustc_serialize` crate for the encodable and decodable\nimplementation.",null,null],[3,"SizeChecker","bincode::rustc_serialize","",null,null],[12,"size_limit","","",4,null],[12,"written","","",4,null],[3,"EncoderWriter","","An Encoder that encodes values directly into a Writer.",null,null],[3,"DecoderReader","","A Decoder that reads bytes from a buffer.",null,null],[3,"InvalidEncoding","","",null,null],[12,"desc","","",5,null],[12,"detail","","",5,null],[4,"EncodingError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",6,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",6,null],[4,"DecodingError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used\nduring decoding, that error will be stored and returned here.",7,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid\nencoding, this error will be returned.  This error is only possible\nif a stream is corrupted.  A stream produced from `encode` or `encode_into`\nshould **never** produce an InvalidEncoding error.",7,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this\nerror is returned.",7,null],[5,"encode","","Encodes an encodable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode","","Decodes a slice of bytes into an object.",null,null],[5,"encode_into","","Encodes an object directly into a `Writer`.",null,{"inputs":[{"name":"t"},{"name":"w"},{"name":"sizelimit"}],"output":{"name":"encodingresult"}}],[5,"decode_from","","Decoes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decodingresult"}}],[5,"encoded_size","","Returns the size that an object would be if encoded using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"encoded_size_bounded","","Given a maximum size limit, check how large an object would be if it\nwere to be encoded.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"cause","","",7,null],[11,"from","","",7,{"inputs":[{"name":"ioerror"}],"output":{"name":"decodingerror"}}],[11,"new","","",8,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"decoderreader"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",8,null],[11,"read_nil","","",8,null],[11,"read_usize","","",8,null],[11,"read_u64","","",8,null],[11,"read_u32","","",8,null],[11,"read_u16","","",8,null],[11,"read_u8","","",8,null],[11,"read_isize","","",8,null],[11,"read_i64","","",8,null],[11,"read_i32","","",8,null],[11,"read_i16","","",8,null],[11,"read_i8","","",8,null],[11,"read_bool","","",8,null],[11,"read_f64","","",8,null],[11,"read_f32","","",8,null],[11,"read_char","","",8,null],[11,"read_str","","",8,null],[11,"read_enum","","",8,null],[11,"read_enum_variant","","",8,null],[11,"read_enum_variant_arg","","",8,null],[11,"read_enum_struct_variant","","",8,null],[11,"read_enum_struct_variant_field","","",8,null],[11,"read_struct","","",8,null],[11,"read_struct_field","","",8,null],[11,"read_tuple","","",8,null],[11,"read_tuple_arg","","",8,null],[11,"read_tuple_struct","","",8,null],[11,"read_tuple_struct_arg","","",8,null],[11,"read_option","","",8,null],[11,"read_seq","","",8,null],[11,"read_seq_elt","","",8,null],[11,"read_map","","",8,null],[11,"read_map_elt_key","","",8,null],[11,"read_map_elt_val","","",8,null],[11,"error","","",8,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"cause","","",6,null],[11,"new","","",9,{"inputs":[{"name":"w"}],"output":{"name":"encoderwriter"}}],[11,"new","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"sizechecker"}}],[11,"emit_nil","","",9,null],[11,"emit_usize","","",9,null],[11,"emit_u64","","",9,null],[11,"emit_u32","","",9,null],[11,"emit_u16","","",9,null],[11,"emit_u8","","",9,null],[11,"emit_isize","","",9,null],[11,"emit_i64","","",9,null],[11,"emit_i32","","",9,null],[11,"emit_i16","","",9,null],[11,"emit_i8","","",9,null],[11,"emit_bool","","",9,null],[11,"emit_f64","","",9,null],[11,"emit_f32","","",9,null],[11,"emit_char","","",9,null],[11,"emit_str","","",9,null],[11,"emit_enum","","",9,null],[11,"emit_enum_variant","","",9,null],[11,"emit_enum_variant_arg","","",9,null],[11,"emit_enum_struct_variant","","",9,null],[11,"emit_enum_struct_variant_field","","",9,null],[11,"emit_struct","","",9,null],[11,"emit_struct_field","","",9,null],[11,"emit_tuple","","",9,null],[11,"emit_tuple_arg","","",9,null],[11,"emit_tuple_struct","","",9,null],[11,"emit_tuple_struct_arg","","",9,null],[11,"emit_option","","",9,null],[11,"emit_option_none","","",9,null],[11,"emit_option_some","","",9,null],[11,"emit_seq","","",9,null],[11,"emit_seq_elt","","",9,null],[11,"emit_map","","",9,null],[11,"emit_map_elt_key","","",9,null],[11,"emit_map_elt_val","","",9,null],[11,"emit_nil","","",4,null],[11,"emit_usize","","",4,null],[11,"emit_u64","","",4,null],[11,"emit_u32","","",4,null],[11,"emit_u16","","",4,null],[11,"emit_u8","","",4,null],[11,"emit_isize","","",4,null],[11,"emit_i64","","",4,null],[11,"emit_i32","","",4,null],[11,"emit_i16","","",4,null],[11,"emit_i8","","",4,null],[11,"emit_bool","","",4,null],[11,"emit_f64","","",4,null],[11,"emit_f32","","",4,null],[11,"emit_char","","",4,null],[11,"emit_str","","",4,null],[11,"emit_enum","","",4,null],[11,"emit_enum_variant","","",4,null],[11,"emit_enum_variant_arg","","",4,null],[11,"emit_enum_struct_variant","","",4,null],[11,"emit_enum_struct_variant_field","","",4,null],[11,"emit_struct","","",4,null],[11,"emit_struct_field","","",4,null],[11,"emit_tuple","","",4,null],[11,"emit_tuple_arg","","",4,null],[11,"emit_tuple_struct","","",4,null],[11,"emit_tuple_struct_arg","","",4,null],[11,"emit_option","","",4,null],[11,"emit_option_none","","",4,null],[11,"emit_option_some","","",4,null],[11,"emit_seq","","",4,null],[11,"emit_seq_elt","","",4,null],[11,"emit_map","","",4,null],[11,"emit_map_elt_key","","",4,null],[11,"emit_map_elt_val","","",4,null],[6,"EncodingResult","","",null,null],[6,"DecodingResult","","",null,null],[0,"serde","bincode","A collection of serialization and deserialization functions\nthat use the `serde` crate for the serializable and deserializable\nimplementation.",null,null],[3,"Deserializer","bincode::serde","A Deserializer that reads bytes from a buffer.",null,null],[3,"InvalidEncoding","","",null,null],[12,"desc","","",10,null],[12,"detail","","",10,null],[3,"Serializer","","An Serializer that encodes values directly into a Writer.",null,null],[4,"DeserializeError","","An error that can be produced during decoding.",null,null],[13,"IoError","","If the error stems from the reader that is being used\nduring decoding, that error will be stored and returned here.",11,null],[13,"InvalidEncoding","","If the bytes in the reader are not decodable because of an invalid\nencoding, this error will be returned.  This error is only possible\nif a stream is corrupted.  A stream produced from `encode` or `encode_into`\nshould **never** produce an InvalidEncoding error.",11,null],[13,"SizeLimit","","If decoding a message takes more than the provided size limit, this\nerror is returned.",11,null],[13,"Serde","","",11,null],[4,"SerializeError","","An error that can be produced during encoding.",null,null],[13,"IoError","","An error originating from the underlying `Writer`.",12,null],[13,"SizeLimit","","An object could not be encoded with the given size limit.",12,null],[13,"Custom","","A custom error message",12,null],[5,"serialize_into","","Serializes an object directly into a `Writer`.",null,{"inputs":[{"name":"w"},{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialize","","Serializes a serializable object into a `Vec` of bytes.",null,{"inputs":[{"name":"t"},{"name":"sizelimit"}],"output":{"name":"serializeresult"}}],[5,"serialized_size","","Returns the size that an object would be if serialized using bincode.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"serialized_size_bounded","","Given a maximum size limit, check how large an object would be if it\nwere to be serialized.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"option"}}],[5,"deserialize_from","","Deserializes an object directly from a `Buffer`ed Reader.",null,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializeresult"}}],[5,"deserialize","","Deserializes a slice of bytes into an object.",null,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",11,null],[11,"description","","",11,null],[11,"cause","","",11,null],[11,"from","","",11,{"inputs":[{"name":"ioerror"}],"output":{"name":"deserializeerror"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"deserializeerror"}}],[11,"fmt","","",11,null],[11,"custom","","",11,{"inputs":[{"name":"t"}],"output":{"name":"deserializeerror"}}],[11,"end_of_stream","","",11,{"inputs":[],"output":{"name":"deserializeerror"}}],[11,"new","","",13,{"inputs":[{"name":"r"},{"name":"sizelimit"}],"output":{"name":"deserializer"}}],[11,"bytes_read","","Returns the number of bytes read from the contained Reader.",13,null],[11,"deserialize","","",13,null],[11,"deserialize_bool","","",13,null],[11,"deserialize_u16","","",13,null],[11,"deserialize_u32","","",13,null],[11,"deserialize_u64","","",13,null],[11,"deserialize_i16","","",13,null],[11,"deserialize_i32","","",13,null],[11,"deserialize_i64","","",13,null],[11,"deserialize_f32","","",13,null],[11,"deserialize_f64","","",13,null],[11,"deserialize_u8","","",13,null],[11,"deserialize_usize","","",13,null],[11,"deserialize_i8","","",13,null],[11,"deserialize_isize","","",13,null],[11,"deserialize_unit","","",13,null],[11,"deserialize_char","","",13,null],[11,"deserialize_str","","",13,null],[11,"deserialize_string","","",13,null],[11,"deserialize_bytes","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_tuple","","",13,null],[11,"deserialize_seq_fixed_size","","",13,null],[11,"deserialize_option","","",13,null],[11,"deserialize_seq","","",13,null],[11,"deserialize_map","","",13,null],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,null],[11,"deserialize_newtype_struct","","",13,null],[11,"deserialize_unit_struct","","",13,null],[11,"deserialize_tuple_struct","","",13,null],[11,"deserialize_ignored_any","","",13,null],[11,"visit_variant","","",13,null],[11,"visit_unit","","",13,null],[11,"visit_newtype","","",13,null],[11,"visit_tuple","","",13,null],[11,"visit_struct","","",13,null],[11,"fmt","","",12,null],[11,"custom","","",12,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",12,null],[11,"description","","",12,null],[11,"cause","","",12,null],[11,"new","","",14,{"inputs":[{"name":"w"}],"output":{"name":"serializer"}}],[11,"serialize_unit","","",14,null],[11,"serialize_unit_struct","","",14,null],[11,"serialize_bool","","",14,null],[11,"serialize_u8","","",14,null],[11,"serialize_u16","","",14,null],[11,"serialize_u32","","",14,null],[11,"serialize_u64","","",14,null],[11,"serialize_usize","","",14,null],[11,"serialize_i8","","",14,null],[11,"serialize_i16","","",14,null],[11,"serialize_i32","","",14,null],[11,"serialize_i64","","",14,null],[11,"serialize_isize","","",14,null],[11,"serialize_f32","","",14,null],[11,"serialize_f64","","",14,null],[11,"serialize_str","","",14,null],[11,"serialize_char","","",14,null],[11,"serialize_bytes","","",14,null],[11,"serialize_none","","",14,null],[11,"serialize_some","","",14,null],[11,"serialize_seq","","",14,null],[11,"serialize_seq_elt","","",14,null],[11,"serialize_seq_end","","",14,null],[11,"serialize_seq_fixed_size","","",14,null],[11,"serialize_tuple","","",14,null],[11,"serialize_tuple_elt","","",14,null],[11,"serialize_tuple_end","","",14,null],[11,"serialize_tuple_struct","","",14,null],[11,"serialize_tuple_struct_elt","","",14,null],[11,"serialize_tuple_struct_end","","",14,null],[11,"serialize_tuple_variant","","",14,null],[11,"serialize_tuple_variant_elt","","",14,null],[11,"serialize_tuple_variant_end","","",14,null],[11,"serialize_map","","",14,null],[11,"serialize_map_key","","",14,null],[11,"serialize_map_value","","",14,null],[11,"serialize_map_end","","",14,null],[11,"serialize_struct","","",14,null],[11,"serialize_struct_elt","","",14,null],[11,"serialize_struct_end","","",14,null],[11,"serialize_struct_variant","","",14,null],[11,"serialize_struct_variant_elt","","",14,null],[11,"serialize_struct_variant_end","","",14,null],[11,"serialize_newtype_struct","","",14,null],[11,"serialize_newtype_variant","","",14,null],[11,"serialize_unit_variant","","",14,null],[6,"DeserializeResult","","",null,null],[6,"SerializeResult","","",null,null],[11,"clone","bincode","",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null]],"paths":[[4,"SizeLimit"],[3,"RefBox"],[3,"StrBox"],[3,"SliceBox"],[3,"SizeChecker"],[3,"InvalidEncoding"],[4,"EncodingError"],[4,"DecodingError"],[3,"DecoderReader"],[3,"EncoderWriter"],[3,"InvalidEncoding"],[4,"DeserializeError"],[4,"SerializeError"],[3,"Deserializer"],[3,"Serializer"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec&lt;u8&gt;` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[3,"Bytes","","`Bytes` wraps a `&amp;[u8]` in order to serialize into a byte array.",null,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"new","","Construct a new, empty `ByteBuf`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",0,null],[11,"into","","",0,null],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"serialize","","",0,null],[11,"visit_unit","","",1,null],[11,"visit_seq","","",1,null],[11,"visit_bytes","","",1,null],[11,"visit_byte_buf","","",1,null],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",2,null],[11,"hash","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"cmp","","",2,null],[11,"new","","Wrap an existing `&amp;[u8]`.",2,null],[11,"fmt","","",2,null],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",2,null],[11,"deref","","",2,null],[11,"serialize","","",2,null],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",3,null],[13,"Usize","","Represents a `usize` type.",3,null],[13,"U8","","Represents a `u8` type.",3,null],[13,"U16","","Represents a `u16` type.",3,null],[13,"U32","","Represents a `u32` type.",3,null],[13,"U64","","Represents a `u64` type.",3,null],[13,"Isize","","Represents a `isize` type.",3,null],[13,"I8","","Represents a `i8` type.",3,null],[13,"I16","","Represents a `i16` type.",3,null],[13,"I32","","Represents a `i32` type.",3,null],[13,"I64","","Represents a `i64` type.",3,null],[13,"F32","","Represents a `f32` type.",3,null],[13,"F64","","Represents a `f64` type.",3,null],[13,"Char","","Represents a `char` type.",3,null],[13,"Str","","Represents a `&amp;str` type.",3,null],[13,"String","","Represents a `String` type.",3,null],[13,"Unit","","Represents a `()` type.",3,null],[13,"Option","","Represents an `Option&lt;T&gt;` type.",3,null],[13,"Seq","","Represents a sequence type.",3,null],[13,"Map","","Represents a map type.",3,null],[13,"UnitStruct","","Represents a unit struct type.",3,null],[13,"NewtypeStruct","","Represents a newtype type.",3,null],[13,"TupleStruct","","Represents a tuple struct type.",3,null],[13,"Struct","","Represents a struct type.",3,null],[13,"FieldName","","Represents a struct field name.",3,null],[13,"Tuple","","Represents a tuple type.",3,null],[13,"Enum","","Represents an `enum` type.",3,null],[13,"VariantName","","Represents an enum variant name.",3,null],[13,"StructVariant","","Represents a struct variant.",3,null],[13,"TupleVariant","","Represents a tuple variant.",3,null],[13,"UnitVariant","","Represents a unit variant.",3,null],[13,"Bytes","","Represents a `&amp;[u8]` type.",3,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"TupleVisitor13","","Construct a tuple visitor.",null,null],[3,"TupleVisitor14","","Construct a tuple visitor.",null,null],[3,"TupleVisitor15","","Construct a tuple visitor.",null,null],[3,"TupleVisitor16","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements\nDeserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",4,null],[11,"visit_seq","","",4,null],[11,"visit_bool","","",5,null],[11,"visit_str","","",5,null],[11,"visit_unit","","",6,null],[11,"new","","Construct a new sequence visitor.",7,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",7,null],[11,"visit_seq","","",7,null],[11,"new","","Construct a new sequence visitor.",8,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",8,null],[11,"visit_seq","","",8,null],[11,"new","","Construct a new sequence visitor.",9,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",9,null],[11,"visit_seq","","",9,null],[11,"new","","Construct a new sequence visitor.",10,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",10,null],[11,"visit_seq","","",10,null],[11,"new","","Construct a new sequence visitor.",11,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",11,null],[11,"visit_seq","","",11,null],[11,"new","","Construct a new sequence visitor.",12,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",12,null],[11,"visit_seq","","",12,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",13,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",13,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",14,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",14,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",15,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",15,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",16,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",16,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",17,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",17,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",18,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",18,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",19,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",19,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",20,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",20,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",21,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",21,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",22,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",22,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",23,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",23,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",24,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",24,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",25,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",25,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",26,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",26,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",27,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",27,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",28,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",28,null],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",29,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",29,null],[11,"visit_map","","",29,null],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",30,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",30,null],[11,"visit_map","","",30,null],[11,"deserialize","","",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",32,null],[13,"InvalidType","","The value had an incorrect type.",32,null],[13,"InvalidLength","","The value had an invalid length.",32,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",32,null],[13,"EndOfStream","","EOF while deserializing a value.",32,null],[13,"UnknownVariant","","Unknown variant in enum.",32,null],[13,"UnknownField","","Unknown field in struct.",32,null],[13,"MissingField","","Struct is missing a field.",32,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",33,null],[10,"into_deserializer","","Convert this value into a deserializer.",33,null],[11,"clone","","",32,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"custom","","",32,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",32,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",32,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",32,null],[11,"description","","",32,null],[11,"cause","","",32,null],[11,"deserialize_bool","","",34,null],[11,"deserialize_usize","","",34,null],[11,"deserialize_u8","","",34,null],[11,"deserialize_u16","","",34,null],[11,"deserialize_u32","","",34,null],[11,"deserialize_u64","","",34,null],[11,"deserialize_isize","","",34,null],[11,"deserialize_i8","","",34,null],[11,"deserialize_i16","","",34,null],[11,"deserialize_i32","","",34,null],[11,"deserialize_i64","","",34,null],[11,"deserialize_f32","","",34,null],[11,"deserialize_f64","","",34,null],[11,"deserialize_char","","",34,null],[11,"deserialize_str","","",34,null],[11,"deserialize_string","","",34,null],[11,"deserialize_unit","","",34,null],[11,"deserialize_seq","","",34,null],[11,"deserialize_seq_fixed_size","","",34,null],[11,"deserialize_bytes","","",34,null],[11,"deserialize_map","","",34,null],[11,"deserialize_unit_struct","","",34,null],[11,"deserialize_newtype_struct","","",34,null],[11,"deserialize_tuple_struct","","",34,null],[11,"deserialize_struct","","",34,null],[11,"deserialize_struct_field","","",34,null],[11,"deserialize_tuple","","",34,null],[11,"deserialize_enum","","",34,null],[11,"deserialize_ignored_any","","",34,null],[11,"deserialize","","",34,null],[11,"deserialize_option","","",34,null],[11,"deserialize_bool","","",35,null],[11,"deserialize_usize","","",35,null],[11,"deserialize_u8","","",35,null],[11,"deserialize_u16","","",35,null],[11,"deserialize_u32","","",35,null],[11,"deserialize_u64","","",35,null],[11,"deserialize_isize","","",35,null],[11,"deserialize_i8","","",35,null],[11,"deserialize_i16","","",35,null],[11,"deserialize_i32","","",35,null],[11,"deserialize_i64","","",35,null],[11,"deserialize_f32","","",35,null],[11,"deserialize_f64","","",35,null],[11,"deserialize_char","","",35,null],[11,"deserialize_str","","",35,null],[11,"deserialize_string","","",35,null],[11,"deserialize_unit","","",35,null],[11,"deserialize_option","","",35,null],[11,"deserialize_seq","","",35,null],[11,"deserialize_seq_fixed_size","","",35,null],[11,"deserialize_bytes","","",35,null],[11,"deserialize_map","","",35,null],[11,"deserialize_unit_struct","","",35,null],[11,"deserialize_newtype_struct","","",35,null],[11,"deserialize_tuple_struct","","",35,null],[11,"deserialize_struct","","",35,null],[11,"deserialize_struct_field","","",35,null],[11,"deserialize_tuple","","",35,null],[11,"deserialize_enum","","",35,null],[11,"deserialize_ignored_any","","",35,null],[11,"deserialize","","",35,null],[11,"deserialize_bool","","",36,null],[11,"deserialize_usize","","",36,null],[11,"deserialize_u8","","",36,null],[11,"deserialize_u16","","",36,null],[11,"deserialize_u32","","",36,null],[11,"deserialize_u64","","",36,null],[11,"deserialize_isize","","",36,null],[11,"deserialize_i8","","",36,null],[11,"deserialize_i16","","",36,null],[11,"deserialize_i32","","",36,null],[11,"deserialize_i64","","",36,null],[11,"deserialize_f32","","",36,null],[11,"deserialize_f64","","",36,null],[11,"deserialize_char","","",36,null],[11,"deserialize_str","","",36,null],[11,"deserialize_string","","",36,null],[11,"deserialize_unit","","",36,null],[11,"deserialize_option","","",36,null],[11,"deserialize_seq","","",36,null],[11,"deserialize_seq_fixed_size","","",36,null],[11,"deserialize_bytes","","",36,null],[11,"deserialize_map","","",36,null],[11,"deserialize_unit_struct","","",36,null],[11,"deserialize_newtype_struct","","",36,null],[11,"deserialize_tuple_struct","","",36,null],[11,"deserialize_struct","","",36,null],[11,"deserialize_struct_field","","",36,null],[11,"deserialize_tuple","","",36,null],[11,"deserialize_enum","","",36,null],[11,"deserialize_ignored_any","","",36,null],[11,"deserialize","","",36,null],[11,"deserialize_bool","","",37,null],[11,"deserialize_usize","","",37,null],[11,"deserialize_u8","","",37,null],[11,"deserialize_u16","","",37,null],[11,"deserialize_u32","","",37,null],[11,"deserialize_u64","","",37,null],[11,"deserialize_isize","","",37,null],[11,"deserialize_i8","","",37,null],[11,"deserialize_i16","","",37,null],[11,"deserialize_i32","","",37,null],[11,"deserialize_i64","","",37,null],[11,"deserialize_f32","","",37,null],[11,"deserialize_f64","","",37,null],[11,"deserialize_char","","",37,null],[11,"deserialize_str","","",37,null],[11,"deserialize_string","","",37,null],[11,"deserialize_unit","","",37,null],[11,"deserialize_option","","",37,null],[11,"deserialize_seq","","",37,null],[11,"deserialize_seq_fixed_size","","",37,null],[11,"deserialize_bytes","","",37,null],[11,"deserialize_map","","",37,null],[11,"deserialize_unit_struct","","",37,null],[11,"deserialize_newtype_struct","","",37,null],[11,"deserialize_tuple_struct","","",37,null],[11,"deserialize_struct","","",37,null],[11,"deserialize_struct_field","","",37,null],[11,"deserialize_tuple","","",37,null],[11,"deserialize_enum","","",37,null],[11,"deserialize_ignored_any","","",37,null],[11,"deserialize","","",37,null],[11,"deserialize_bool","","",38,null],[11,"deserialize_usize","","",38,null],[11,"deserialize_u8","","",38,null],[11,"deserialize_u16","","",38,null],[11,"deserialize_u32","","",38,null],[11,"deserialize_u64","","",38,null],[11,"deserialize_isize","","",38,null],[11,"deserialize_i8","","",38,null],[11,"deserialize_i16","","",38,null],[11,"deserialize_i32","","",38,null],[11,"deserialize_i64","","",38,null],[11,"deserialize_f32","","",38,null],[11,"deserialize_f64","","",38,null],[11,"deserialize_char","","",38,null],[11,"deserialize_str","","",38,null],[11,"deserialize_string","","",38,null],[11,"deserialize_unit","","",38,null],[11,"deserialize_option","","",38,null],[11,"deserialize_seq","","",38,null],[11,"deserialize_seq_fixed_size","","",38,null],[11,"deserialize_bytes","","",38,null],[11,"deserialize_map","","",38,null],[11,"deserialize_unit_struct","","",38,null],[11,"deserialize_newtype_struct","","",38,null],[11,"deserialize_tuple_struct","","",38,null],[11,"deserialize_struct","","",38,null],[11,"deserialize_struct_field","","",38,null],[11,"deserialize_tuple","","",38,null],[11,"deserialize_enum","","",38,null],[11,"deserialize_ignored_any","","",38,null],[11,"deserialize","","",38,null],[11,"deserialize_bool","","",39,null],[11,"deserialize_usize","","",39,null],[11,"deserialize_u8","","",39,null],[11,"deserialize_u16","","",39,null],[11,"deserialize_u32","","",39,null],[11,"deserialize_u64","","",39,null],[11,"deserialize_isize","","",39,null],[11,"deserialize_i8","","",39,null],[11,"deserialize_i16","","",39,null],[11,"deserialize_i32","","",39,null],[11,"deserialize_i64","","",39,null],[11,"deserialize_f32","","",39,null],[11,"deserialize_f64","","",39,null],[11,"deserialize_char","","",39,null],[11,"deserialize_str","","",39,null],[11,"deserialize_string","","",39,null],[11,"deserialize_unit","","",39,null],[11,"deserialize_option","","",39,null],[11,"deserialize_seq","","",39,null],[11,"deserialize_seq_fixed_size","","",39,null],[11,"deserialize_bytes","","",39,null],[11,"deserialize_map","","",39,null],[11,"deserialize_unit_struct","","",39,null],[11,"deserialize_newtype_struct","","",39,null],[11,"deserialize_tuple_struct","","",39,null],[11,"deserialize_struct","","",39,null],[11,"deserialize_struct_field","","",39,null],[11,"deserialize_tuple","","",39,null],[11,"deserialize_enum","","",39,null],[11,"deserialize_ignored_any","","",39,null],[11,"deserialize","","",39,null],[11,"deserialize_bool","","",40,null],[11,"deserialize_usize","","",40,null],[11,"deserialize_u8","","",40,null],[11,"deserialize_u16","","",40,null],[11,"deserialize_u32","","",40,null],[11,"deserialize_u64","","",40,null],[11,"deserialize_isize","","",40,null],[11,"deserialize_i8","","",40,null],[11,"deserialize_i16","","",40,null],[11,"deserialize_i32","","",40,null],[11,"deserialize_i64","","",40,null],[11,"deserialize_f32","","",40,null],[11,"deserialize_f64","","",40,null],[11,"deserialize_char","","",40,null],[11,"deserialize_str","","",40,null],[11,"deserialize_string","","",40,null],[11,"deserialize_unit","","",40,null],[11,"deserialize_option","","",40,null],[11,"deserialize_seq","","",40,null],[11,"deserialize_seq_fixed_size","","",40,null],[11,"deserialize_bytes","","",40,null],[11,"deserialize_map","","",40,null],[11,"deserialize_unit_struct","","",40,null],[11,"deserialize_newtype_struct","","",40,null],[11,"deserialize_tuple_struct","","",40,null],[11,"deserialize_struct","","",40,null],[11,"deserialize_struct_field","","",40,null],[11,"deserialize_tuple","","",40,null],[11,"deserialize_enum","","",40,null],[11,"deserialize_ignored_any","","",40,null],[11,"deserialize","","",40,null],[11,"deserialize_bool","","",41,null],[11,"deserialize_usize","","",41,null],[11,"deserialize_u8","","",41,null],[11,"deserialize_u16","","",41,null],[11,"deserialize_u32","","",41,null],[11,"deserialize_u64","","",41,null],[11,"deserialize_isize","","",41,null],[11,"deserialize_i8","","",41,null],[11,"deserialize_i16","","",41,null],[11,"deserialize_i32","","",41,null],[11,"deserialize_i64","","",41,null],[11,"deserialize_f32","","",41,null],[11,"deserialize_f64","","",41,null],[11,"deserialize_char","","",41,null],[11,"deserialize_str","","",41,null],[11,"deserialize_string","","",41,null],[11,"deserialize_unit","","",41,null],[11,"deserialize_option","","",41,null],[11,"deserialize_seq","","",41,null],[11,"deserialize_seq_fixed_size","","",41,null],[11,"deserialize_bytes","","",41,null],[11,"deserialize_map","","",41,null],[11,"deserialize_unit_struct","","",41,null],[11,"deserialize_newtype_struct","","",41,null],[11,"deserialize_tuple_struct","","",41,null],[11,"deserialize_struct","","",41,null],[11,"deserialize_struct_field","","",41,null],[11,"deserialize_tuple","","",41,null],[11,"deserialize_enum","","",41,null],[11,"deserialize_ignored_any","","",41,null],[11,"deserialize","","",41,null],[11,"deserialize_bool","","",42,null],[11,"deserialize_usize","","",42,null],[11,"deserialize_u8","","",42,null],[11,"deserialize_u16","","",42,null],[11,"deserialize_u32","","",42,null],[11,"deserialize_u64","","",42,null],[11,"deserialize_isize","","",42,null],[11,"deserialize_i8","","",42,null],[11,"deserialize_i16","","",42,null],[11,"deserialize_i32","","",42,null],[11,"deserialize_i64","","",42,null],[11,"deserialize_f32","","",42,null],[11,"deserialize_f64","","",42,null],[11,"deserialize_char","","",42,null],[11,"deserialize_str","","",42,null],[11,"deserialize_string","","",42,null],[11,"deserialize_unit","","",42,null],[11,"deserialize_option","","",42,null],[11,"deserialize_seq","","",42,null],[11,"deserialize_seq_fixed_size","","",42,null],[11,"deserialize_bytes","","",42,null],[11,"deserialize_map","","",42,null],[11,"deserialize_unit_struct","","",42,null],[11,"deserialize_newtype_struct","","",42,null],[11,"deserialize_tuple_struct","","",42,null],[11,"deserialize_struct","","",42,null],[11,"deserialize_struct_field","","",42,null],[11,"deserialize_tuple","","",42,null],[11,"deserialize_enum","","",42,null],[11,"deserialize_ignored_any","","",42,null],[11,"deserialize","","",42,null],[11,"deserialize_bool","","",43,null],[11,"deserialize_usize","","",43,null],[11,"deserialize_u8","","",43,null],[11,"deserialize_u16","","",43,null],[11,"deserialize_u32","","",43,null],[11,"deserialize_u64","","",43,null],[11,"deserialize_isize","","",43,null],[11,"deserialize_i8","","",43,null],[11,"deserialize_i16","","",43,null],[11,"deserialize_i32","","",43,null],[11,"deserialize_i64","","",43,null],[11,"deserialize_f32","","",43,null],[11,"deserialize_f64","","",43,null],[11,"deserialize_char","","",43,null],[11,"deserialize_str","","",43,null],[11,"deserialize_string","","",43,null],[11,"deserialize_unit","","",43,null],[11,"deserialize_option","","",43,null],[11,"deserialize_seq","","",43,null],[11,"deserialize_seq_fixed_size","","",43,null],[11,"deserialize_bytes","","",43,null],[11,"deserialize_map","","",43,null],[11,"deserialize_unit_struct","","",43,null],[11,"deserialize_newtype_struct","","",43,null],[11,"deserialize_tuple_struct","","",43,null],[11,"deserialize_struct","","",43,null],[11,"deserialize_struct_field","","",43,null],[11,"deserialize_tuple","","",43,null],[11,"deserialize_enum","","",43,null],[11,"deserialize_ignored_any","","",43,null],[11,"deserialize","","",43,null],[11,"deserialize_bool","","",44,null],[11,"deserialize_usize","","",44,null],[11,"deserialize_u8","","",44,null],[11,"deserialize_u16","","",44,null],[11,"deserialize_u32","","",44,null],[11,"deserialize_u64","","",44,null],[11,"deserialize_isize","","",44,null],[11,"deserialize_i8","","",44,null],[11,"deserialize_i16","","",44,null],[11,"deserialize_i32","","",44,null],[11,"deserialize_i64","","",44,null],[11,"deserialize_f32","","",44,null],[11,"deserialize_f64","","",44,null],[11,"deserialize_char","","",44,null],[11,"deserialize_str","","",44,null],[11,"deserialize_string","","",44,null],[11,"deserialize_unit","","",44,null],[11,"deserialize_option","","",44,null],[11,"deserialize_seq","","",44,null],[11,"deserialize_seq_fixed_size","","",44,null],[11,"deserialize_bytes","","",44,null],[11,"deserialize_map","","",44,null],[11,"deserialize_unit_struct","","",44,null],[11,"deserialize_newtype_struct","","",44,null],[11,"deserialize_tuple_struct","","",44,null],[11,"deserialize_struct","","",44,null],[11,"deserialize_struct_field","","",44,null],[11,"deserialize_tuple","","",44,null],[11,"deserialize_enum","","",44,null],[11,"deserialize_ignored_any","","",44,null],[11,"deserialize","","",44,null],[11,"deserialize_bool","","",45,null],[11,"deserialize_usize","","",45,null],[11,"deserialize_u8","","",45,null],[11,"deserialize_u16","","",45,null],[11,"deserialize_u32","","",45,null],[11,"deserialize_u64","","",45,null],[11,"deserialize_isize","","",45,null],[11,"deserialize_i8","","",45,null],[11,"deserialize_i16","","",45,null],[11,"deserialize_i32","","",45,null],[11,"deserialize_i64","","",45,null],[11,"deserialize_f32","","",45,null],[11,"deserialize_f64","","",45,null],[11,"deserialize_char","","",45,null],[11,"deserialize_str","","",45,null],[11,"deserialize_string","","",45,null],[11,"deserialize_unit","","",45,null],[11,"deserialize_option","","",45,null],[11,"deserialize_seq","","",45,null],[11,"deserialize_seq_fixed_size","","",45,null],[11,"deserialize_bytes","","",45,null],[11,"deserialize_map","","",45,null],[11,"deserialize_unit_struct","","",45,null],[11,"deserialize_newtype_struct","","",45,null],[11,"deserialize_tuple_struct","","",45,null],[11,"deserialize_struct","","",45,null],[11,"deserialize_struct_field","","",45,null],[11,"deserialize_tuple","","",45,null],[11,"deserialize_enum","","",45,null],[11,"deserialize_ignored_any","","",45,null],[11,"deserialize","","",45,null],[11,"deserialize_bool","","",46,null],[11,"deserialize_usize","","",46,null],[11,"deserialize_u8","","",46,null],[11,"deserialize_u16","","",46,null],[11,"deserialize_u32","","",46,null],[11,"deserialize_u64","","",46,null],[11,"deserialize_isize","","",46,null],[11,"deserialize_i8","","",46,null],[11,"deserialize_i16","","",46,null],[11,"deserialize_i32","","",46,null],[11,"deserialize_i64","","",46,null],[11,"deserialize_f32","","",46,null],[11,"deserialize_f64","","",46,null],[11,"deserialize_char","","",46,null],[11,"deserialize_str","","",46,null],[11,"deserialize_string","","",46,null],[11,"deserialize_unit","","",46,null],[11,"deserialize_option","","",46,null],[11,"deserialize_seq","","",46,null],[11,"deserialize_seq_fixed_size","","",46,null],[11,"deserialize_bytes","","",46,null],[11,"deserialize_map","","",46,null],[11,"deserialize_unit_struct","","",46,null],[11,"deserialize_newtype_struct","","",46,null],[11,"deserialize_tuple_struct","","",46,null],[11,"deserialize_struct","","",46,null],[11,"deserialize_struct_field","","",46,null],[11,"deserialize_tuple","","",46,null],[11,"deserialize_enum","","",46,null],[11,"deserialize_ignored_any","","",46,null],[11,"deserialize","","",46,null],[11,"deserialize_bool","","",47,null],[11,"deserialize_usize","","",47,null],[11,"deserialize_u8","","",47,null],[11,"deserialize_u16","","",47,null],[11,"deserialize_u32","","",47,null],[11,"deserialize_u64","","",47,null],[11,"deserialize_isize","","",47,null],[11,"deserialize_i8","","",47,null],[11,"deserialize_i16","","",47,null],[11,"deserialize_i32","","",47,null],[11,"deserialize_i64","","",47,null],[11,"deserialize_f32","","",47,null],[11,"deserialize_f64","","",47,null],[11,"deserialize_char","","",47,null],[11,"deserialize_str","","",47,null],[11,"deserialize_string","","",47,null],[11,"deserialize_unit","","",47,null],[11,"deserialize_option","","",47,null],[11,"deserialize_seq","","",47,null],[11,"deserialize_seq_fixed_size","","",47,null],[11,"deserialize_bytes","","",47,null],[11,"deserialize_map","","",47,null],[11,"deserialize_unit_struct","","",47,null],[11,"deserialize_newtype_struct","","",47,null],[11,"deserialize_tuple_struct","","",47,null],[11,"deserialize_struct","","",47,null],[11,"deserialize_struct_field","","",47,null],[11,"deserialize_tuple","","",47,null],[11,"deserialize_enum","","",47,null],[11,"deserialize_ignored_any","","",47,null],[11,"deserialize","","",47,null],[11,"deserialize_bool","","",48,null],[11,"deserialize_usize","","",48,null],[11,"deserialize_u8","","",48,null],[11,"deserialize_u16","","",48,null],[11,"deserialize_u32","","",48,null],[11,"deserialize_u64","","",48,null],[11,"deserialize_isize","","",48,null],[11,"deserialize_i8","","",48,null],[11,"deserialize_i16","","",48,null],[11,"deserialize_i32","","",48,null],[11,"deserialize_i64","","",48,null],[11,"deserialize_f32","","",48,null],[11,"deserialize_f64","","",48,null],[11,"deserialize_char","","",48,null],[11,"deserialize_str","","",48,null],[11,"deserialize_string","","",48,null],[11,"deserialize_unit","","",48,null],[11,"deserialize_option","","",48,null],[11,"deserialize_seq","","",48,null],[11,"deserialize_seq_fixed_size","","",48,null],[11,"deserialize_bytes","","",48,null],[11,"deserialize_map","","",48,null],[11,"deserialize_unit_struct","","",48,null],[11,"deserialize_newtype_struct","","",48,null],[11,"deserialize_tuple_struct","","",48,null],[11,"deserialize_struct","","",48,null],[11,"deserialize_struct_field","","",48,null],[11,"deserialize_tuple","","",48,null],[11,"deserialize_enum","","",48,null],[11,"deserialize_ignored_any","","",48,null],[11,"deserialize","","",48,null],[11,"deserialize","","",49,null],[11,"deserialize_enum","","",49,null],[11,"deserialize_bool","","",49,null],[11,"deserialize_usize","","",49,null],[11,"deserialize_u8","","",49,null],[11,"deserialize_u16","","",49,null],[11,"deserialize_u32","","",49,null],[11,"deserialize_u64","","",49,null],[11,"deserialize_isize","","",49,null],[11,"deserialize_i8","","",49,null],[11,"deserialize_i16","","",49,null],[11,"deserialize_i32","","",49,null],[11,"deserialize_i64","","",49,null],[11,"deserialize_f32","","",49,null],[11,"deserialize_f64","","",49,null],[11,"deserialize_char","","",49,null],[11,"deserialize_str","","",49,null],[11,"deserialize_string","","",49,null],[11,"deserialize_unit","","",49,null],[11,"deserialize_option","","",49,null],[11,"deserialize_seq","","",49,null],[11,"deserialize_seq_fixed_size","","",49,null],[11,"deserialize_bytes","","",49,null],[11,"deserialize_map","","",49,null],[11,"deserialize_unit_struct","","",49,null],[11,"deserialize_newtype_struct","","",49,null],[11,"deserialize_tuple_struct","","",49,null],[11,"deserialize_struct","","",49,null],[11,"deserialize_struct_field","","",49,null],[11,"deserialize_tuple","","",49,null],[11,"deserialize_ignored_any","","",49,null],[11,"visit_variant","","",49,null],[11,"visit_unit","","",49,null],[11,"visit_newtype","","",49,null],[11,"visit_tuple","","",49,null],[11,"visit_struct","","",49,null],[11,"deserialize","","",50,null],[11,"deserialize_enum","","",50,null],[11,"deserialize_bool","","",50,null],[11,"deserialize_usize","","",50,null],[11,"deserialize_u8","","",50,null],[11,"deserialize_u16","","",50,null],[11,"deserialize_u32","","",50,null],[11,"deserialize_u64","","",50,null],[11,"deserialize_isize","","",50,null],[11,"deserialize_i8","","",50,null],[11,"deserialize_i16","","",50,null],[11,"deserialize_i32","","",50,null],[11,"deserialize_i64","","",50,null],[11,"deserialize_f32","","",50,null],[11,"deserialize_f64","","",50,null],[11,"deserialize_char","","",50,null],[11,"deserialize_str","","",50,null],[11,"deserialize_string","","",50,null],[11,"deserialize_unit","","",50,null],[11,"deserialize_option","","",50,null],[11,"deserialize_seq","","",50,null],[11,"deserialize_seq_fixed_size","","",50,null],[11,"deserialize_bytes","","",50,null],[11,"deserialize_map","","",50,null],[11,"deserialize_unit_struct","","",50,null],[11,"deserialize_newtype_struct","","",50,null],[11,"deserialize_tuple_struct","","",50,null],[11,"deserialize_struct","","",50,null],[11,"deserialize_struct_field","","",50,null],[11,"deserialize_tuple","","",50,null],[11,"deserialize_ignored_any","","",50,null],[11,"visit_variant","","",50,null],[11,"visit_unit","","",50,null],[11,"visit_newtype","","",50,null],[11,"visit_tuple","","",50,null],[11,"visit_struct","","",50,null],[11,"deserialize","","",51,null],[11,"deserialize_enum","","",51,null],[11,"deserialize_bool","","",51,null],[11,"deserialize_usize","","",51,null],[11,"deserialize_u8","","",51,null],[11,"deserialize_u16","","",51,null],[11,"deserialize_u32","","",51,null],[11,"deserialize_u64","","",51,null],[11,"deserialize_isize","","",51,null],[11,"deserialize_i8","","",51,null],[11,"deserialize_i16","","",51,null],[11,"deserialize_i32","","",51,null],[11,"deserialize_i64","","",51,null],[11,"deserialize_f32","","",51,null],[11,"deserialize_f64","","",51,null],[11,"deserialize_char","","",51,null],[11,"deserialize_str","","",51,null],[11,"deserialize_string","","",51,null],[11,"deserialize_unit","","",51,null],[11,"deserialize_option","","",51,null],[11,"deserialize_seq","","",51,null],[11,"deserialize_seq_fixed_size","","",51,null],[11,"deserialize_bytes","","",51,null],[11,"deserialize_map","","",51,null],[11,"deserialize_unit_struct","","",51,null],[11,"deserialize_newtype_struct","","",51,null],[11,"deserialize_tuple_struct","","",51,null],[11,"deserialize_struct","","",51,null],[11,"deserialize_struct_field","","",51,null],[11,"deserialize_tuple","","",51,null],[11,"deserialize_ignored_any","","",51,null],[11,"visit_variant","","",51,null],[11,"visit_unit","","",51,null],[11,"visit_newtype","","",51,null],[11,"visit_tuple","","",51,null],[11,"visit_struct","","",51,null],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",52,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",52,null],[11,"deserialize_bool","","",52,null],[11,"deserialize_usize","","",52,null],[11,"deserialize_u8","","",52,null],[11,"deserialize_u16","","",52,null],[11,"deserialize_u32","","",52,null],[11,"deserialize_u64","","",52,null],[11,"deserialize_isize","","",52,null],[11,"deserialize_i8","","",52,null],[11,"deserialize_i16","","",52,null],[11,"deserialize_i32","","",52,null],[11,"deserialize_i64","","",52,null],[11,"deserialize_f32","","",52,null],[11,"deserialize_f64","","",52,null],[11,"deserialize_char","","",52,null],[11,"deserialize_str","","",52,null],[11,"deserialize_string","","",52,null],[11,"deserialize_unit","","",52,null],[11,"deserialize_option","","",52,null],[11,"deserialize_seq","","",52,null],[11,"deserialize_seq_fixed_size","","",52,null],[11,"deserialize_bytes","","",52,null],[11,"deserialize_map","","",52,null],[11,"deserialize_unit_struct","","",52,null],[11,"deserialize_newtype_struct","","",52,null],[11,"deserialize_tuple_struct","","",52,null],[11,"deserialize_struct","","",52,null],[11,"deserialize_struct_field","","",52,null],[11,"deserialize_tuple","","",52,null],[11,"deserialize_enum","","",52,null],[11,"deserialize_ignored_any","","",52,null],[11,"visit","","",52,null],[11,"end","","",52,null],[11,"size_hint","","",52,null],[11,"new","","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",53,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",53,null],[11,"deserialize_bool","","",53,null],[11,"deserialize_usize","","",53,null],[11,"deserialize_u8","","",53,null],[11,"deserialize_u16","","",53,null],[11,"deserialize_u32","","",53,null],[11,"deserialize_u64","","",53,null],[11,"deserialize_isize","","",53,null],[11,"deserialize_i8","","",53,null],[11,"deserialize_i16","","",53,null],[11,"deserialize_i32","","",53,null],[11,"deserialize_i64","","",53,null],[11,"deserialize_f32","","",53,null],[11,"deserialize_f64","","",53,null],[11,"deserialize_char","","",53,null],[11,"deserialize_str","","",53,null],[11,"deserialize_string","","",53,null],[11,"deserialize_unit","","",53,null],[11,"deserialize_option","","",53,null],[11,"deserialize_seq","","",53,null],[11,"deserialize_seq_fixed_size","","",53,null],[11,"deserialize_bytes","","",53,null],[11,"deserialize_map","","",53,null],[11,"deserialize_unit_struct","","",53,null],[11,"deserialize_newtype_struct","","",53,null],[11,"deserialize_tuple_struct","","",53,null],[11,"deserialize_struct","","",53,null],[11,"deserialize_struct_field","","",53,null],[11,"deserialize_tuple","","",53,null],[11,"deserialize_enum","","",53,null],[11,"deserialize_ignored_any","","",53,null],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V, E&gt;` with a specific length.",54,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"unbounded","","Construct a new `MapDeserializer&lt;I, K, V, E&gt;` that is not bounded\nby a specific length and that delegates to `iter` for its size hint.",54,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deserialize","","",54,null],[11,"deserialize_seq","","",54,null],[11,"deserialize_seq_fixed_size","","",54,null],[11,"deserialize_bool","","",54,null],[11,"deserialize_usize","","",54,null],[11,"deserialize_u8","","",54,null],[11,"deserialize_u16","","",54,null],[11,"deserialize_u32","","",54,null],[11,"deserialize_u64","","",54,null],[11,"deserialize_isize","","",54,null],[11,"deserialize_i8","","",54,null],[11,"deserialize_i16","","",54,null],[11,"deserialize_i32","","",54,null],[11,"deserialize_i64","","",54,null],[11,"deserialize_f32","","",54,null],[11,"deserialize_f64","","",54,null],[11,"deserialize_char","","",54,null],[11,"deserialize_str","","",54,null],[11,"deserialize_string","","",54,null],[11,"deserialize_unit","","",54,null],[11,"deserialize_option","","",54,null],[11,"deserialize_bytes","","",54,null],[11,"deserialize_map","","",54,null],[11,"deserialize_unit_struct","","",54,null],[11,"deserialize_newtype_struct","","",54,null],[11,"deserialize_tuple_struct","","",54,null],[11,"deserialize_struct","","",54,null],[11,"deserialize_struct_field","","",54,null],[11,"deserialize_tuple","","",54,null],[11,"deserialize_enum","","",54,null],[11,"deserialize_ignored_any","","",54,null],[11,"visit_key","","",54,null],[11,"visit_value","","",54,null],[11,"end","","",54,null],[11,"size_hint","","",54,null],[11,"visit","","",54,null],[11,"end","","",54,null],[11,"size_hint","","",54,null],[11,"new","","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",55,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",55,null],[11,"deserialize_bool","","",55,null],[11,"deserialize_usize","","",55,null],[11,"deserialize_u8","","",55,null],[11,"deserialize_u16","","",55,null],[11,"deserialize_u32","","",55,null],[11,"deserialize_u64","","",55,null],[11,"deserialize_isize","","",55,null],[11,"deserialize_i8","","",55,null],[11,"deserialize_i16","","",55,null],[11,"deserialize_i32","","",55,null],[11,"deserialize_i64","","",55,null],[11,"deserialize_f32","","",55,null],[11,"deserialize_f64","","",55,null],[11,"deserialize_char","","",55,null],[11,"deserialize_str","","",55,null],[11,"deserialize_string","","",55,null],[11,"deserialize_unit","","",55,null],[11,"deserialize_option","","",55,null],[11,"deserialize_seq","","",55,null],[11,"deserialize_seq_fixed_size","","",55,null],[11,"deserialize_bytes","","",55,null],[11,"deserialize_map","","",55,null],[11,"deserialize_unit_struct","","",55,null],[11,"deserialize_newtype_struct","","",55,null],[11,"deserialize_tuple_struct","","",55,null],[11,"deserialize_struct","","",55,null],[11,"deserialize_struct_field","","",55,null],[11,"deserialize_tuple","","",55,null],[11,"deserialize_enum","","",55,null],[11,"deserialize_ignored_any","","",55,null],[11,"into_deserializer","serde::bytes","",2,null],[11,"deserialize","serde::de::value","",56,null],[11,"deserialize_bool","","",56,null],[11,"deserialize_usize","","",56,null],[11,"deserialize_u8","","",56,null],[11,"deserialize_u16","","",56,null],[11,"deserialize_u32","","",56,null],[11,"deserialize_u64","","",56,null],[11,"deserialize_isize","","",56,null],[11,"deserialize_i8","","",56,null],[11,"deserialize_i16","","",56,null],[11,"deserialize_i32","","",56,null],[11,"deserialize_i64","","",56,null],[11,"deserialize_f32","","",56,null],[11,"deserialize_f64","","",56,null],[11,"deserialize_char","","",56,null],[11,"deserialize_str","","",56,null],[11,"deserialize_string","","",56,null],[11,"deserialize_unit","","",56,null],[11,"deserialize_option","","",56,null],[11,"deserialize_seq","","",56,null],[11,"deserialize_seq_fixed_size","","",56,null],[11,"deserialize_bytes","","",56,null],[11,"deserialize_map","","",56,null],[11,"deserialize_unit_struct","","",56,null],[11,"deserialize_newtype_struct","","",56,null],[11,"deserialize_tuple_struct","","",56,null],[11,"deserialize_struct","","",56,null],[11,"deserialize_struct_field","","",56,null],[11,"deserialize_tuple","","",56,null],[11,"deserialize_enum","","",56,null],[11,"deserialize_ignored_any","","",56,null],[11,"into_deserializer","serde::bytes","",0,null],[11,"deserialize","serde::de::value","",57,null],[11,"deserialize_bool","","",57,null],[11,"deserialize_usize","","",57,null],[11,"deserialize_u8","","",57,null],[11,"deserialize_u16","","",57,null],[11,"deserialize_u32","","",57,null],[11,"deserialize_u64","","",57,null],[11,"deserialize_isize","","",57,null],[11,"deserialize_i8","","",57,null],[11,"deserialize_i16","","",57,null],[11,"deserialize_i32","","",57,null],[11,"deserialize_i64","","",57,null],[11,"deserialize_f32","","",57,null],[11,"deserialize_f64","","",57,null],[11,"deserialize_char","","",57,null],[11,"deserialize_str","","",57,null],[11,"deserialize_string","","",57,null],[11,"deserialize_unit","","",57,null],[11,"deserialize_option","","",57,null],[11,"deserialize_seq","","",57,null],[11,"deserialize_seq_fixed_size","","",57,null],[11,"deserialize_bytes","","",57,null],[11,"deserialize_map","","",57,null],[11,"deserialize_unit_struct","","",57,null],[11,"deserialize_newtype_struct","","",57,null],[11,"deserialize_tuple_struct","","",57,null],[11,"deserialize_struct","","",57,null],[11,"deserialize_struct_field","","",57,null],[11,"deserialize_tuple","","",57,null],[11,"deserialize_enum","","",57,null],[11,"deserialize_ignored_any","","",57,null],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",58,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",58,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",58,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",58,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame struct field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",59,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",60,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",60,null],[10,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",60,null],[10,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.\nA reasonable default is to forward to `deserialize_u64`.",60,null],[10,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.\nA reasonable default is to forward to `deserialize_u64`.",60,null],[10,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.\nA reasonable default is to forward to `deserialize_u64`.",60,null],[10,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.\nA reasonable default is to forward to `deserialize_u64`.",60,null],[10,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",60,null],[10,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.\nA reasonable default is to forward to `deserialize_i64`.",60,null],[10,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.\nA reasonable default is to forward to `deserialize_i64`.",60,null],[10,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.\nA reasonable default is to forward to `deserialize_i64`.",60,null],[10,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.\nA reasonable default is to forward to `deserialize_i64`.",60,null],[10,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",60,null],[10,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.\nA reasonable default is to forward to `deserialize_f64`.",60,null],[10,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",60,null],[10,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",60,null],[10,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&amp;str` value.",60,null],[10,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",60,null],[10,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",60,null],[10,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",60,null],[10,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",60,null],[10,"deserialize_seq_fixed_size","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows\ndeserializers to parse arrays that aren&#39;t tagged as arrays.",60,null],[10,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec&lt;u8&gt;`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",60,null],[10,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",60,null],[10,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren&#39;t tagged as a unit struct.",60,null],[10,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren&#39;t tagged as a newtype struct.\nA reasonable default is to simply deserialize the expected value directly.",60,null],[10,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",60,null],[10,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",60,null],[10,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field\nname.  This allows deserializers to choose between &amp;str, usize, or &amp;[u8] to properly\ndeserialize a struct field.",60,null],[10,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",60,null],[10,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",60,null],[10,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",60,null],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",61,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",61,null],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",61,null],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",61,null],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",61,null],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",61,null],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",61,null],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",61,null],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",61,null],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",61,null],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",61,null],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",61,null],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",61,null],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",61,null],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",61,null],[11,"visit_str","","`visit_str` deserializes a `&amp;str` into a `Value`.",61,null],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid\na copy if it is deserializing a string from a `String` type.  By default it passes a `&amp;str`\nto the `visit_str` method.",61,null],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",61,null],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",61,null],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",61,null],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",61,null],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",61,null],[11,"visit_seq","","`visit_seq` deserializes a `SeqVisitor` into a `Value`.",61,null],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",61,null],[11,"visit_bytes","","`visit_bytes` deserializes a `&amp;[u8]` into a `Value`.",61,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec&lt;u8&gt;` into a `Value`.",61,null],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",62,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",62,null],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",62,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",62,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",63,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",63,null],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",63,null],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",63,null],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",63,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",63,null],[11,"missing_field","","Report that the struct has a field that wasn&#39;t deserialized",63,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",64,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",64,null],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",65,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",65,null],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",65,null],[10,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value.\nA good default is often to use the `visit_tuple` method to deserialize a `(value,)`.",65,null],[10,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.\nIf no tuple variants are expected, yield a\n`Err(serde::de::Error::invalid_type(serde::de::Type::TupleVariant))`",65,null],[10,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.\nIf no struct variants are expected, yield a\n`Err(serde::de::Error::invalid_type(serde::de::Type::StructVariant))`",65,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position&#39;s line and column.",null,null],[11,"new","","Construct a new `LineColIterator&lt;Iter&gt;`.",66,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",66,null],[11,"col","","Report the current column inside the iterator.",66,null],[11,"get_ref","","Gets a reference to the underlying iterator.",66,null],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",66,null],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",66,null],[11,"peek","","peeks at the next value",66,null],[11,"next","","",66,null],[0,"ser","serde","Generic serialization framework.\n# For Developers who want to serialize objects\nImplement the `Serialize` trait for the type of objects you want to serialize. Call methods of\nthe `serializer` object. For which methods to call and how to do so, look at the documentation\nof the `Serializer` trait.",null,null],[0,"impls","serde::ser","Implementations for all of Rust&#39;s builtin types. Tuples implement the `Serialize` trait if they\nhave at most 16 fields. Arrays implement the `Serialize` trait if their length is 32 or less.\nYou can always forward array serialization to slice serialization, which works for any length.\nLong tuples are best replaced by tuple structs, for which you can use `derive(Serialize)`. In\nthat case the number of fields is irrelevant.",null,null],[8,"Error","","`Error` is a trait that allows a `Serialize` to generically create a\n`Serializer` error.",null,null],[10,"custom","","Raised when there is a general error when serializing a type.",67,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",67,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",68,null],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",69,null],[16,"SeqState","","A state object that is initialized by `serialize_seq`, passed to\n`serialize_seq_elt`, and consumed by `serialize_seq_end`. Use `()` if no\nstate is required.",69,null],[16,"TupleState","","A state object that is initialized by `serialize_tuple`, passed to\n`serialize_tuple_elt`, and consumed by `serialize_tuple_end`. Use `()`\nif no state is required.",69,null],[16,"TupleStructState","","A state object that is initialized by `serialize_tuple_struct`, passed\nto `serialize_tuple_struct_elt`, and consumed by\n`serialize_tuple_struct_end`. Use `()` if no state is required.",69,null],[16,"TupleVariantState","","A state object that is initialized by `serialize_tuple_variant`, passed\nto `serialize_tuple_variant_elt`, and consumed by\n`serialize_tuple_variant_end`. Use `()` if no state is required.",69,null],[16,"MapState","","A state object that is initialized by `serialize_map`, passed to\n`serialize_map_elt`, and consumed by `serialize_map_end`. Use `()` if no\nstate is required.",69,null],[16,"StructState","","A state object that is initialized by `serialize_struct`, passed to\n`serialize_struct_elt`, and consumed by `serialize_struct_end`. Use `()`\nif no state is required.",69,null],[16,"StructVariantState","","A state object that is initialized by `serialize_struct_variant`, passed\nto `serialize_struct_variant_elt`, and consumed by\n`serialize_struct_variant_end`. Use `()` if no state is required.",69,null],[10,"serialize_bool","","Serializes a `bool` value.",69,null],[10,"serialize_isize","","Serializes an `isize` value. If the format does not differentiate\nbetween `isize` and `i64`, a reasonable implementation would be to cast\nthe value to `i64` and forward to `serialize_i64`.",69,null],[10,"serialize_i8","","Serializes an `i8` value. If the format does not differentiate between\n`i8` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",69,null],[10,"serialize_i16","","Serializes an `i16` value. If the format does not differentiate between\n`i16` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",69,null],[10,"serialize_i32","","Serializes an `i32` value. If the format does not differentiate between\n`i32` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",69,null],[10,"serialize_i64","","Serializes an `i64` value.",69,null],[10,"serialize_usize","","Serializes a `usize` value. If the format does not differentiate between\n`usize` and `u64`, a reasonable implementation would be to cast the\nvalue to `u64` and forward to `serialize_u64`.",69,null],[10,"serialize_u8","","Serializes a `u8` value. If the format does not differentiate between\n`u8` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",69,null],[10,"serialize_u16","","Serializes a `u16` value. If the format does not differentiate between\n`u16` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",69,null],[10,"serialize_u32","","Serializes a `u32` value. If the format does not differentiate between\n`u32` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",69,null],[10,"serialize_u64","","`Serializes a `u64` value.",69,null],[10,"serialize_f32","","Serializes an `f32` value. If the format does not differentiate between\n`f32` and `f64`, a reasonable implementation would be to cast the value\nto `f64` and forward to `serialize_f64`.",69,null],[10,"serialize_f64","","Serializes an `f64` value.",69,null],[10,"serialize_char","","Serializes a character. If the format does not support characters,\nit is reasonable to serialize it as a single element `str` or a `u32`.",69,null],[10,"serialize_str","","Serializes a `&amp;str`.",69,null],[10,"serialize_bytes","","Enables serializers to serialize byte slices more compactly or more\nefficiently than other types of slices. If no efficient implementation\nis available, a reasonable implementation would be to forward to\n`serialize_seq`. If forwarded, the implementation looks usually just like this:\n```rust\nlet mut state = try!(self.serialize_seq(value));\nfor b in value {\n    try!(self.serialize_seq_elt(&amp;mut state, b));\n}\nself.serialize_seq_end(state)\n```",69,null],[10,"serialize_unit","","Serializes a `()` value. It&#39;s reasonable to just not serialize anything.",69,null],[10,"serialize_unit_struct","","Serializes a unit struct value. A reasonable implementation would be to\nforward to `serialize_unit`.",69,null],[10,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no\narguments. A reasonable implementation would be to forward to\n`serialize_unit`.",69,null],[10,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a newtype\nstruct, to be more efficiently serialized than a tuple struct with\nmultiple items. A reasonable implementation would be to forward to\n`serialize_tuple_struct` or to just serialize the inner value without wrapping.",69,null],[10,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently serialized\nthan a variant with multiple items. A reasonable implementation would be\nto forward to `serialize_tuple_variant`.",69,null],[10,"serialize_none","","Serializes a `None` value.",69,null],[10,"serialize_some","","Serializes a `Some(...)` value.",69,null],[10,"serialize_seq","","Begins to serialize a sequence. This call must be followed by zero or\nmore calls to `serialize_seq_elt`, then a call to `serialize_seq_end`.",69,null],[10,"serialize_seq_elt","","Serializes a sequence element. Must have previously called\n`serialize_seq`.",69,null],[10,"serialize_seq_end","","Finishes serializing a sequence.",69,null],[10,"serialize_seq_fixed_size","","Begins to serialize a sequence whose length will be known at\ndeserialization time. This call must be followed by zero or more calls\nto `serialize_seq_elt`, then a call to `serialize_seq_end`. A reasonable\nimplementation would be to forward to `serialize_seq`.",69,null],[10,"serialize_tuple","","Begins to serialize a tuple. This call must be followed by zero or more\ncalls to `serialize_tuple_elt`, then a call to `serialize_tuple_end`. A\nreasonable implementation would be to forward to `serialize_seq`.",69,null],[10,"serialize_tuple_elt","","Serializes a tuple element. Must have previously called\n`serialize_tuple`.",69,null],[10,"serialize_tuple_end","","Finishes serializing a tuple.",69,null],[10,"serialize_tuple_struct","","Begins to serialize a tuple struct. This call must be followed by zero\nor more calls to `serialize_tuple_struct_elt`, then a call to\n`serialize_tuple_struct_end`. A reasonable implementation would be to\nforward to `serialize_tuple`.",69,null],[10,"serialize_tuple_struct_elt","","Serializes a tuple struct element. Must have previously called\n`serialize_tuple_struct`.",69,null],[10,"serialize_tuple_struct_end","","Finishes serializing a tuple struct.",69,null],[10,"serialize_tuple_variant","","Begins to serialize a tuple variant. This call must be followed by zero\nor more calls to `serialize_tuple_variant_elt`, then a call to\n`serialize_tuple_variant_end`. A reasonable implementation would be to\nforward to `serialize_tuple_struct`.",69,null],[10,"serialize_tuple_variant_elt","","Serializes a tuple variant element. Must have previously called\n`serialize_tuple_variant`.",69,null],[10,"serialize_tuple_variant_end","","Finishes serializing a tuple variant.",69,null],[10,"serialize_map","","Begins to serialize a map. This call must be followed by zero or more\ncalls to `serialize_map_key` and `serialize_map_value`, then a call to\n`serialize_map_end`.",69,null],[10,"serialize_map_key","","Serialize a map key. Must have previously called `serialize_map`.",69,null],[10,"serialize_map_value","","Serialize a map value. Must have previously called `serialize_map`.",69,null],[10,"serialize_map_end","","Finishes serializing a map.",69,null],[10,"serialize_struct","","Begins to serialize a struct. This call must be followed by zero or more\ncalls to `serialize_struct_elt`, then a call to `serialize_struct_end`.",69,null],[10,"serialize_struct_elt","","Serializes a struct field. Must have previously called\n`serialize_struct`.",69,null],[10,"serialize_struct_end","","Finishes serializing a struct.",69,null],[10,"serialize_struct_variant","","Begins to serialize a struct variant. This call must be followed by zero\nor more calls to `serialize_struct_variant_elt`, then a call to\n`serialize_struct_variant_end`.",69,null],[10,"serialize_struct_variant_elt","","Serialize a struct variant element. Must have previously called\n`serialize_struct_variant`.",69,null],[10,"serialize_struct_variant_end","","Finishes serializing a struct variant.",69,null],[14,"forward_to_deserialize","serde","Helper to forward `Deserializer` methods to `Deserializer::deserialize`.\nEvery given method ignores all arguments and forwards to `deserialize`.\nNote that `deserialize_enum` simply returns an `Error::invalid_type`; a\nbetter approach is tracked in [serde-rs/serde#521][1].",null,null]],"paths":[[3,"ByteBuf"],[3,"ByteBufVisitor"],[3,"Bytes"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PhantomDataVisitor"],[3,"BinaryHeapVisitor"],[3,"BTreeSetVisitor"],[3,"LinkedListVisitor"],[3,"HashSetVisitor"],[3,"VecVisitor"],[3,"VecDequeVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"BTreeMapVisitor"],[3,"HashMapVisitor"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[8,"Error"],[8,"Serialize"],[8,"Serializer"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[11,"to_degrees","","Converts radians to degrees.",11,null],[11,"to_radians","","Converts degrees to radians.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",12,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",16,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",16,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",16,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",16,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",16,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",16,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",16,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",16,null],[10,"swap_bytes","","Reverses the byte order of the integer.",16,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",16,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",16,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",16,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",17,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",4,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",5,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"fmt","","",3,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",7,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",8,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"fmt","","",6,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"fmt","","",9,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"fmt","","",12,null],[11,"fmt","","",13,null],[11,"eq","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",10,null],[11,"description","","",12,null],[11,"cause","","",12,null],[11,"fmt","","",12,null],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,null],[11,"fmt","","",11,null],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",17,null],[11,"emit_nil","","",17,null],[11,"emit_usize","","",17,null],[11,"emit_u64","","",17,null],[11,"emit_u32","","",17,null],[11,"emit_u16","","",17,null],[11,"emit_u8","","",17,null],[11,"emit_isize","","",17,null],[11,"emit_i64","","",17,null],[11,"emit_i32","","",17,null],[11,"emit_i16","","",17,null],[11,"emit_i8","","",17,null],[11,"emit_bool","","",17,null],[11,"emit_f64","","",17,null],[11,"emit_f32","","",17,null],[11,"emit_char","","",17,null],[11,"emit_str","","",17,null],[11,"emit_enum","","",17,null],[11,"emit_enum_variant","","",17,null],[11,"emit_enum_variant_arg","","",17,null],[11,"emit_enum_struct_variant","","",17,null],[11,"emit_enum_struct_variant_field","","",17,null],[11,"emit_struct","","",17,null],[11,"emit_struct_field","","",17,null],[11,"emit_tuple","","",17,null],[11,"emit_tuple_arg","","",17,null],[11,"emit_tuple_struct","","",17,null],[11,"emit_tuple_struct_arg","","",17,null],[11,"emit_option","","",17,null],[11,"emit_option_none","","",17,null],[11,"emit_option_some","","",17,null],[11,"emit_seq","","",17,null],[11,"emit_seq_elt","","",17,null],[11,"emit_map","","",17,null],[11,"emit_map_elt_key","","",17,null],[11,"emit_map_elt_val","","",17,null],[11,"encode","","",9,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",9,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",9,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",9,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,null],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,null],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector.\nReturns None otherwise.",9,null],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector.\nReturns None otherwise.",9,null],[11,"into_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",9,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",9,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",9,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",9,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",9,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",9,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,null],[11,"is_empty","","Returns true if the stack is empty.",18,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",18,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,null],[11,"next","","",19,null],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",19,null],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,null],[11,"read_usize","","",21,null],[11,"read_u8","","",21,null],[11,"read_u16","","",21,null],[11,"read_u32","","",21,null],[11,"read_u64","","",21,null],[11,"read_isize","","",21,null],[11,"read_i8","","",21,null],[11,"read_i16","","",21,null],[11,"read_i32","","",21,null],[11,"read_i64","","",21,null],[11,"read_f32","","",21,null],[11,"read_f64","","",21,null],[11,"read_bool","","",21,null],[11,"read_char","","",21,null],[11,"read_str","","",21,null],[11,"read_enum","","",21,null],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,null],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,null],[11,"read_struct","","",21,null],[11,"read_struct_field","","",21,null],[11,"read_tuple","","",21,null],[11,"read_tuple_arg","","",21,null],[11,"read_tuple_struct","","",21,null],[11,"read_tuple_struct_arg","","",21,null],[11,"read_option","","",21,null],[11,"read_seq","","",21,null],[11,"read_seq_elt","","",21,null],[11,"read_map","","",21,null],[11,"read_map_elt_key","","",21,null],[11,"read_map_elt_val","","",21,null],[11,"error","","",21,null],[11,"to_json","","",9,null],[11,"fmt","","Encodes a json value into a string",9,null],[11,"fmt","","Encodes a json value into a string",22,null],[11,"fmt","","Encodes a json value into a string",23,null],[11,"indent","","Set the indentation level for the emitted JSON",24,null],[11,"fmt","","Encodes a json value into a string",24,null],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,null],[10,"read_usize","","Read a usize value.",25,null],[10,"read_u64","","Read a u64 value.",25,null],[10,"read_u32","","Read a u32 value.",25,null],[10,"read_u16","","Read a u16 value.",25,null],[10,"read_u8","","Read a u8 value.",25,null],[10,"read_isize","","Read a isize value.",25,null],[10,"read_i64","","Read a i64 value.",25,null],[10,"read_i32","","Read a i32 value.",25,null],[10,"read_i16","","Read a i16 value.",25,null],[10,"read_i8","","Read a i8 value.",25,null],[10,"read_bool","","Read a bool value.",25,null],[10,"read_f64","","Read a f64 value.",25,null],[10,"read_f32","","Read a f32 value.",25,null],[10,"read_char","","Read a char value.",25,null],[10,"read_str","","Read a string value.",25,null],[10,"read_enum","","Read an enumeration value.",25,null],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,null],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,null],[10,"read_struct","","Read an struct value.",25,null],[10,"read_struct_field","","Read a field for a struct value.",25,null],[10,"read_tuple","","Read a tuple value.",25,null],[10,"read_tuple_arg","","Read a data item for a tuple.",25,null],[10,"read_tuple_struct","","Read a tuple struct value.",25,null],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,null],[10,"read_option","","Read an optional value.",25,null],[10,"read_seq","","Read a sequence of values.",25,null],[10,"read_seq_elt","","Read an element in the sequence.",25,null],[10,"read_map","","Read an associative container (map).",25,null],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,null],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,null],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,null],[10,"emit_usize","","Emit a usize value.",26,null],[10,"emit_u64","","Emit a u64 value.",26,null],[10,"emit_u32","","Emit a u32 value.",26,null],[10,"emit_u16","","Emit a u16 value.",26,null],[10,"emit_u8","","Emit a u8 value.",26,null],[10,"emit_isize","","Emit a isize value.",26,null],[10,"emit_i64","","Emit a i64 value.",26,null],[10,"emit_i32","","Emit a i32 value.",26,null],[10,"emit_i16","","Emit a i16 value.",26,null],[10,"emit_i8","","Emit a i8 value.",26,null],[10,"emit_bool","","Emit a bool value.",26,null],[10,"emit_f64","","Emit a f64 value.",26,null],[10,"emit_f32","","Emit a f32 value.",26,null],[10,"emit_char","","Emit a char value.",26,null],[10,"emit_str","","Emit a string value.",26,null],[10,"emit_enum","","Emit an enumeration value.",26,null],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,null],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,null],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,null],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,null],[10,"emit_struct","","Emit a struct value.",26,null],[10,"emit_struct_field","","Emit a field item for a struct.",26,null],[10,"emit_tuple","","Emit a tuple value.",26,null],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,null],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,null],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,null],[10,"emit_option","","Emit an optional value.",26,null],[10,"emit_option_none","","Emit the `None` optional value.",26,null],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,null],[10,"emit_seq","","Emit a sequence of values.",26,null],[10,"emit_seq_elt","","Emit an element in a sequence.",26,null],[10,"emit_map","","Emit an associative container (map).",26,null],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,null],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,null],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,null],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,null],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
initSearch(searchIndex);
